# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
#          cd aws-infra-main
#          cd packer
#          packer build -var "aws_access_key=${aws_access_key_dev}" -var "aws_secret_key=${aws_secret_key_dev}" ami.json
#          cd ..

name: Java CI with Maven

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      aws_access_key_dev: ${{secrets.AWS_DEV_ACCESS_KEY}}
      aws_secret_key_dev: ${{secrets.AWS_DEV_SECRET_KEY}}
      ssh_public: ${{secrets.SSH_PUB}}
      ssh_private: ${{secrets.SSH_PRIVATE}}

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: "11"
          distribution: "temurin"
          cache: maven

      - name: Install awscli
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli
      - name: Install SSH
        run: sudo apt-get install -y ssh

      - name: Configure AWS credentials
        env:
          aws_access_key_demo: ${{secrets.AWS_DEMO_ACCESS_KEY}}
          aws_secret_key_demo: ${{secrets.AWS_DEMO_SECRET_KEY}}
        run: |
          aws configure set aws_access_key_id $aws_access_key_demo --profile demo
          aws configure set aws_secret_access_key $aws_secret_key_demo --profile demo
      - name: Add SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUB}}
          SSH_KNOWN_HOSTS_PROD: ${{ secrets.HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/ec2
          chmod 600 ~/.ssh/ec2
          echo "$SSH_KNOWN_HOSTS_PROD" > ~/.ssh/known_hosts

      - name: Extract Java ZIP file on EC2 instance
        run: |
          ssh -i ~/.ssh/ec2 -o UserKnownHostsFile=~/.ssh/known_hosts -o StrictHostKeyChecking=no -tt ec2-user@35.90.193.213 "unzip /home/ec2-user/csye6225-web-app.zip -d /usr/local/tomcat/webapps"


      - name: Start application on EC2 using screen
        run: |
          ssh -i ~/.ssh/ec2 -o UserKnownHostsFile=~/.ssh/known_hosts -tt ec2-user@35.90.193.213 "screen -dmS csye6225-web-app java -jar /usr/local/tomcat/webapps/webapp-0.0.1-SNAPSHOT.jar"
