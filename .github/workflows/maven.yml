# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
#          cd aws-infra-main
#          cd packer
#          packer build -var "aws_access_key=${aws_access_key_dev}" -var "aws_secret_key=${aws_secret_key_dev}" ami.json
#          cd ..

name: Java CI with Maven

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      aws_access_key_dev: ${{secrets.AWS_DEV_ACCESS_KEY}}
      aws_secret_key_dev: ${{secrets.AWS_DEV_SECRET_KEY}}
      ssh_public: ${{secrets.SSH_PUB}}
      ssh_private: ${{secrets.SSH_PRIVATE}}

    steps:
      - uses: actions/checkout@v3
      # - name: Set up JDK 11
      #   uses: actions/setup-java@v3
      #   with:
      #     java-version: "11"
      #     distribution: "temurin"
      #     cache: maven
      # - name: Build with Maven
      #   run: mvn -B package --file pom.xml
      # - name: Build Artifact
      #   run: |
      #     mvn clean install
      #     cd target

      # - name: Zip Artifact
      #   run: echo "current build number is "
      #     pwd
      #     mkdir -p codedeploy_artifact
      #     cd codedeploy_artifact
      #     cp ../pom.xml .
      #     cp ../target/webapp-0.0.1-SNAPSHOT.jar .
      #     cp ../src/main/resources/*.properties .
      #     zip -r csye6225-web-app.zip .
      #     rm *.xml *.properties *.jar
      #     ls -al
      #     pwd
      #     cd ..
      #     pwd

      - name: Install awscli
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli
      - name: Install SSH
        run: sudo apt-get install -y ssh

      - name: Configure AWS credentials
        env:
          aws_access_key_demo: ${{secrets.AWS_DEMO_ACCESS_KEY}}
          aws_secret_key_demo: ${{secrets.AWS_DEMO_SECRET_KEY}}
        run: |
          aws configure set aws_access_key_id $aws_access_key_demo --profile demo
          aws configure set aws_secret_access_key $aws_secret_key_demo --profile demo
      - name: Add SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE }}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUB}}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          echo "$SSH_PUBLIC_KEY" > ~/.ssh/id_rsa.pub
          chmod 600 ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa.pub

      - name: Terraform Apply
        env:
          aws_access_key_demo: ${{secrets.AWS_DEMO_ACCESS_KEY}}
          aws_secret_key_demo: ${{secrets.AWS_DEMO_SECRET_KEY}}
        run: |
          cd aws-infra-main
          terraform init
          terraform apply -auto-approve -var "aws_access_key=${aws_access_key_demo}" -var "aws_secret_key=${aws_secret_key_demo}" -var "public_key=${ssh_public}"  -var "private_key=${ssh_private}"

      - name: Get Infrastructure Outputs
        id: outputs
        run: |
          echo "::set-output name=ip::$(terraform output instance_public_ip)"

      - name: Copy Java ZIP file to EC2 instance
        run: |
          IP=${{ steps.outputs.outputs.ip }}
          scp -i ~/.ssh/id_rsa codedeploy_artifact/csye6225-web-app.zip ec2-user@${IP}:/home/tomcat/csye6225-web-app.zip

      - name: Extract Java ZIP file on EC2 instance
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@${IP} "unzip /home/tomcat/csye6225-web-app.zip -d /opt/tomcat/webapps/"

      - name: Start application on EC2 using screen
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@${IP} "screen -dmS csye6225-web-app java -jar /opt/tomcat/webapps/webapp-0.0.1-SNAPSHOT.jar"
